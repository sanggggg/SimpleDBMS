//options//{//  static = true;//  DEBUG_PARSER = true;//  IGNORE_CASE = true;//}PARSER_BEGIN(SimpleDBMSParser)package main.java.kr.ac.snu.ids;public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SHOW_TABLES = 4;  public static final int PRINT_INSERT_QUERY = 5;  public static final int PRINT_DELETE_QUERY = 6;  public static final int PRINT_SELECT_QUERY = 7;  public static void main(String args[]) throws ParseException  {    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2019-12345> ");    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        System.out.print("DB_2019-12345> ");        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("'CREATE TABLE' requested");      	break;      case PRINT_DROP_TABLE:        System.out.println("'DROP TABLE' requested");        break;      case PRINT_DESC:        System.out.println("'DESC' requested");        break;      case PRINT_SHOW_TABLES:        System.out.println("'SHOW TABLES' requested");        break;      case PRINT_INSERT_QUERY:        System.out.println("'INSERT' requested");        break;      case PRINT_DELETE_QUERY:        System.out.println("'DELETE' requested");        break;      case PRINT_SELECT_QUERY:        System.out.println("'SELECT' requested");        break;    }    System.out.print("DB_2019-12345> ");  }}PARSER_END(SimpleDBMSParser)SKIP : { < SPACE : " " > | < NEW_LINE : "\n" > |"\r" | "\t" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < INSERT_INTO : "insert into" >| < DELETE_FROM : "delete from" >| < SELECT : "select" >| < FROM : "from" >| < WHERE : "where" >| < AS : "as" >| < OR : "or" >| < AND : "and" >| < IS : "is" >| < NOT : "not" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < VALUES : "values" >| < NOT_NULL : "not null" >| < NULL : "null" >| < ASTERISK : "*" >| < PERIOD : "." >}TOKEN :{  < INEQ_S : "<" >| < INEQ_B : ">" >| < INEQ_SE : "<=" >| < INEQ_BE : ">=" >| < INEQ_E : "=" >| < INEQ_NE : "!=" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < QUOTE : "'" >| < #SIGN : "+" | "-" >| < #DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < #ALPHABET : [ "a"-"z", "A"-"Z" ] >| < #NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >| < #NN : < DIGIT > < DIGIT > >| < #NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > | < SPACE > >| < #NON_QUOTE_SPECIAL_CHARACTERS : "`"|"~"|"!"|"@"|"#"|"$"|"%"|"^"|"&"|"*"|"("|")"|"_"|                                    	"-"|"+"|"="|"{"|"}"|"["|"]"|"|"|":"|";"|"<"|","|">"|"."|"?"|"/"|"\\" >}void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+  < NEW_LINE >}int query() :{  int q;}{  (    createTableQuery()    {      q = PRINT_CREATE_TABLE;    }    |    dropTableQuery()    {      q = PRINT_DROP_TABLE;    }    |    descTableQuery()    {      q = PRINT_DESC;    }    |    showTableQuery()    {      q = PRINT_SHOW_TABLES;    }    |    insertQuery()    {      q = PRINT_INSERT_QUERY;    }    |    deleteQuery()    {      q = PRINT_DELETE_QUERY;    }    |    selectQuery()    {      q = PRINT_SELECT_QUERY;    }  )  {    return q;  }}void createTableQuery() :{}{  < CREATE_TABLE >  tableName()  tableElementList()}void dropTableQuery() :{}{  < DROP_TABLE >  tableName()}void descTableQuery() :{}{  < DESC >  tableName()}void showTableQuery() :{}{  < SHOW_TABLES >}void insertQuery() :{}{  < INSERT_INTO >  tableName()  insertColumnsAndSource()}void deleteQuery() :{}{  < DELETE_FROM >  tableName()  [whereClause()]}void selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}void selectList() :{}{  < ASTERISK >  | selectedColumn() (< COMMA > selectedColumn())*}void selectedColumn() :{}{  [ LOOKAHEAD(2) tableName() < PERIOD >]  columnName()  [ < AS > columnName() ]}void tableExpression() :{}{  fromClause()  [ whereClause() ]}void fromClause() :{}{  < FROM >  tableReferenceList()}void tableReferenceList() :{}{  referedTable()  (< COMMA > referedTable())*}void referedTable() :{}{  tableName()  [ < AS > tableName()]}void whereClause() :{}{  < WHERE >  booleanValueExpression()}void booleanValueExpression() :{}{  booleanTerm()  ( < OR > booleanTerm())*}void booleanTerm() :{}{  booleanFactor()  ( < AND > booleanFactor())*}void booleanFactor() :{}{  [< NOT >]  booleanTest()}void booleanTest() :{}{  predicate() |  parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN >  booleanValueExpression()  < RIGHT_PAREN >}void predicate() :{}{  LOOKAHEAD(3)  comparisonPredicate()  | nullPredicate()}void comparisonPredicate() :{}{  compOperand()  compOp()  compOperand()}void compOperand() :{}{  comparableValue()  | [ LOOKAHEAD(2) tableName() < PERIOD > ] columnName()}void compOp() :{}{  < INEQ_S > |  < INEQ_SE > |  < INEQ_B > |  < INEQ_BE > |  < INEQ_E > |  < INEQ_NE >}void comparableValue() :{}{  < INT_VALUE > |  < CHAR_STRING > |  < DATE_VALUE >}void nullPredicate() :{}{  [ LOOKAHEAD(2) tableName() < PERIOD > ]  columnName()  nullOperation()}void nullOperation() :{}{  < IS > [ < NOT > ] < NULL >}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}void columnDefinition() :{}{  columnName()  dataType()  (    < NOT_NULL >  )?}void tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}void primaryKeyConstraint() :{}{  < PRIMARY_KEY >  columnNameList()}void referentialConstraint() :{}{  < FOREIGN_KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}void insertColumnsAndSource() :{}{  [columnNameList()]  valueList()}void valueList() :{}{  < VALUES >  < LEFT_PAREN >  value()  (    < COMMA >    value()  )*  < RIGHT_PAREN >}void columnNameList() :{}{  < LEFT_PAREN >  columnName()  (    < COMMA >    columnName()  )*  < RIGHT_PAREN >}void dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}void tableName() :{}{  < LEGAL_IDENTIFIER >}void columnName() :{}{  < LEGAL_IDENTIFIER >}void value() :{}{  < NULL > |  comparableValue()}