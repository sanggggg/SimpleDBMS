//options
//{
//  static = true;
//  DEBUG_PARSER = false;
//  IGNORE_CASE = true;
//}

PARSER_BEGIN(SimpleDBMSParser)

package kr.ac.snu.ids;

import kr.ac.snu.ids.db.BerKeleyDB;
import kr.ac.snu.ids.db.ComparableValue;
import kr.ac.snu.ids.db.DataDefinitionManager;
import kr.ac.snu.ids.db.QueryManager;
import kr.ac.snu.ids.definition.*;
import kr.ac.snu.ids.exceptions.DefinitionError;
import kr.ac.snu.ids.exceptions.NoSuchTableError;
import kr.ac.snu.ids.query.*;
import kr.ac.snu.ids.query.predicate.*;
import java.util.ArrayList;
import java.util.List;

public class SimpleDBMSParser
{
    public static final int PRINT_SYNTAX_ERROR = 0;

    public static final int PRINT_CREATE_TABLE = 1;

    public static final int PRINT_DROP_TABLE = 2;

    public static final int PRINT_DESC = 3;

    public static final int PRINT_SHOW_TABLES = 4;

    public static final int PRINT_INSERT_QUERY = 5;

    public static final int PRINT_DELETE_QUERY = 6;

    public static final int PRINT_SELECT_QUERY = 7;

    public static void main(String[] args) throws ParseException {

        SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
        System.out.print("DB_2018-15366> ");
        while (true) {
            try {
                SimpleDBMSParser.command();
            }
            catch (Exception e) {
                e.printStackTrace();
                printMessage("Syntax error", true);
                SimpleDBMSParser.ReInit(System.in);
            }
        }
    }

    /**
    * query의 종류에 대응하는 메세지를 콘솔에 출력한다
    * lastLine은 유저의 queryList 입력이 끝난 경우 true이며 이때 콘솔에 prompt를 출력한다.
    */
    public static void printMessage(String q, boolean lastLine) {
        if (!q.isEmpty()) System.out.println(q);
        if (lastLine)
            System.out.print("DB_2018-15366> ");
    }
}

PARSER_END(SimpleDBMSParser)

SKIP : { < SPACE : " " > | "\n" |"\r" | "\t" }

// 예약어로 사용되는 Keyword 토
TOKEN :
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < TABLE : "table" >
| < CREATE : "create" >
| < DROP : "drop" >
| < DESC : "desc" >
| < SHOW : "show" >
| < TABLES : "tables" >
| < INSERT : "insert" >
| < INTO : "into" >
| < DELETE : "delete" >
| < SELECT : "select" >
| < FROM : "from" >
| < WHERE : "where" >
| < AS : "as" >
| < OR : "or" >
| < AND : "and" >
| < IS : "is" >
| < NOT : "not" >
| < KEY : "key" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < REFERENCES : "references" >
| < VALUES : "values" >
| < NOT_NULL : "not null" >
| < NULL : "null" >
| < ASTERISK : "*" >
| < PERIOD : "." >
}

// 술어 표현을 위한 비교 연산자 토
TOKEN :
{
  < INEQ_S : "<" >
| < INEQ_B : ">" >
| < INEQ_SE : "<=" >
| < INEQ_BE : ">=" >
| < INEQ_E : "=" >
| < INEQ_NE : "!=" >
}

TOKEN :
{
  < #NON_QUOTE_SPECIAL_CHARACTERS : "`"|"~"|"!"|"@"|"#"|"$"|"%"|"^"|"&"|"*"|"("|")"|"_"|
                                    	"-"|"+"|"="|"{"|"}"|"["|"]"|"|"|":"|";"|"<"|","|">"|"."|"?"|"/"|"\\"|"\""|"\n"|" " >
|  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < QUOTE : "'" >
| < #SIGN : "+" | "-" >
| < #DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < #ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < #NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >
| < #NN : < DIGIT > < DIGIT > >
| < #NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > >
| < NEWLINE: < SEMICOLON > (" "  | "\t" | "\r" )* "\n" >
}

void command() :
{}
{
  queryList()
| < EXIT >
(
    LOOKAHEAD(<NEWLINE>)
  <NEWLINE> | < SEMICOLON >
)
  {
          BerKeleyDB.closeDatabase();
          System.exit(0);
  }
}

/**
* 유저의 Query List 입력 ( queries .... + "\n")을 처리한다.
*/
void queryList() :
{
    String q;
}
{
  (
    q = query()
    (
      LOOKAHEAD(<NEWLINE>)
      <NEWLINE>
      {
        printMessage(q, true);
      }
      |
      < SEMICOLON >
      {
        printMessage(q, false);
      }
    )
  )+
}

String query() :
{
  String message;
}
{
    (
        message = createTableQuery() |
        message = dropTableQuery() |
        message = descTableQuery() |
        message = showTableQuery() |
        message = insertQuery() |
        message = selectQuery() |
        message = deleteQuery()
//        {
//            q = PRINT_DELETE_QUERY;
//        } |

    )

    { return message; }
}

String createTableQuery() :
{
    TableDefinition tableInfo;
    TableDefinition.Builder builder = new TableDefinition.Builder();
    String _tableName;
    String message;
}
{
    < CREATE >
    < TABLE >
    _tableName = tableName()
    tableElementList(builder)

    {
        try {
            tableInfo = builder
                .setTableName(_tableName)
                .create();
            DataDefinitionManager.createSchema(tableInfo);

            message = String.format("'%s' table is created", _tableName);
        } catch (DefinitionError e) {
            message = e.getMessage();
        }
        return message;
    }
}


String dropTableQuery() :
{
    String message;
    String _tableName;
}
{
    < DROP > < TABLE >
    _tableName = tableName()

    {
        try {
            DataDefinitionManager.dropSchema(_tableName);
            message = String.format("'%s' table is dropped", _tableName);
        } catch (DefinitionError e) {
            message = e.getMessage();
        }
        return message;
    }
}

String descTableQuery() :
{
    String _tableName;
    String message;
}
{
    < DESC >
      _tableName = tableName()
    {
        try {
            message = DataDefinitionManager.getSchema(_tableName).toString();
        } catch (NoSuchTableError e) {
            message = e.getMessage();
        }
        return message;
    }
}

String showTableQuery() :
{
    String message;
}
{
    < SHOW > < TABLES >
    {
        List<String> names = DataDefinitionManager.getTableNames();
        if (names.isEmpty()) {
            message = "There is no table";
        } else {
            message = "----------------\n";
            message += String.join("\n", names);
            message += "\n----------------";
        }
        return message;
    }
}

String insertQuery() :
{
    InsertQuery.Builder builder = new InsertQuery.Builder();
    String _tableName;
}
{
    < INSERT > < INTO >
    _tableName = tableName()
    insertColumnsAndSource(builder)
    {
        String message;
        try {
            InsertQuery query = builder.setTableName(_tableName)
                .create();
            QueryManager.insertQuery(query);
            message = "The row is inserted";
        } catch (DefinitionError e) {
            message = e.getMessage();
        }
        return message;
    }
}

String deleteQuery() :
{
    String _tableName;
    BooleanCondition _condition = null;
}
{
    (
        < DELETE > < FROM >
        _tableName = tableName()
        [ _condition = whereClause()]
    )
    {
        String message = null;
        DeleteQuery.Builder builder = new DeleteQuery.Builder();
        try {
            DeleteQuery query =builder.setTableName(_tableName)
                .setCondition(_condition)
                .create();
            int deleteNum = QueryManager.deleteQuery(query);
            message = String.format("%d row(s) are deleted", deleteNum);
        } catch (DefinitionError e) {
          message = e.getMessage();
        }
        return message;
    }
}

String selectQuery() :
{
    SelectQuery.Builder builder = new SelectQuery.Builder();
    List<ColumnReference> _selectList;
    List<TableReference> _tableReferenceList;
    BooleanCondition _condition = null;
}
{
    < SELECT >
    _selectList = selectList()
    < FROM >
    _tableReferenceList = tableReferenceList()
    [ _condition = whereClause() ]
    {
    String message = null;
    try {
        SelectQuery query = builder.setColumnReferenceList(_selectList)
            .setTableReferenceList(_tableReferenceList)
            .setCondition(_condition)
            .create();
        QueryManager.selectQuery(query);
        return "";
    } catch(DefinitionError e) {
        message = e.getMessage();
    }
    return message;
}
}

List<ColumnReference> selectList() :
{
    List<ColumnReference> _selectList = new ArrayList<>();
    ColumnReference _selectedColumn;
}
{
    (
        < ASTERISK > { _selectList.add(new ColumnReference("*", null, null)); }
        | _selectedColumn = selectedColumn() { _selectList.add(_selectedColumn);}
        (< COMMA > _selectedColumn = selectedColumn() { _selectList.add(_selectedColumn);})*
    )
    { return _selectList; }
}

ColumnReference selectedColumn() :
{
    String _tableName = null;
    String _columnName = null;
    String _alias = null;
}
{
    // table name column name에 선점 당하는 것을 막기 위한 LOOKAHEAD 처리
    (
        [ LOOKAHEAD(2) _tableName = tableName() < PERIOD >]
        _columnName = columnName()
        [ < AS > _alias = columnName() ]
    )
    { return new ColumnReference(_columnName, _tableName, _alias); }
}

List<TableReference> tableReferenceList() :
{
    List<TableReference> _tableReferenceList = new ArrayList<>();
    TableReference _referedTable;
}
{
    (
        _referedTable = referedTable() { _tableReferenceList.add(_referedTable); }
        (< COMMA > _referedTable = referedTable() { _tableReferenceList.add(_referedTable); })*
    )
    { return _tableReferenceList; }
}

TableReference referedTable() :
{
    String _tableName = null;
    String _alias = null;
}
{
    (
        _tableName = tableName()
        [ < AS > _alias = tableName() ]
    )
    { return new TableReference(_tableName, _alias); }
}

BooleanCondition whereClause() :
{
    BooleanCondition _cond;
}
{
    < WHERE >
    _cond = booleanValueExpression()
    { return _cond; }
}

BooleanCondition booleanValueExpression() :
{
    BooleanValueExpression _expression = new BooleanValueExpression();
    BooleanCondition _cond;
}
{
    (
        _cond = booleanTerm() { _expression.addTerm(_cond); }
        ( < OR > _cond = booleanTerm() { _expression.addTerm(_cond); })*
    ) 
    { return _expression; }
}

BooleanCondition booleanTerm() :
{
    BooleanTerm _term = new BooleanTerm();
    BooleanCondition _cond;
}
{
    (
        _cond = booleanFactor() { _term.addFactor(_cond); } 
        ( < AND > _cond = booleanFactor() { _term.addFactor(_cond); } )*    
    )
    { return _term; }
}

BooleanCondition booleanFactor() :
{
    BooleanFactor _factor = new BooleanFactor();
    BooleanCondition _cond;
    _factor.setNot(false);
}
{
    [< NOT > { _factor.setNot(true); }]
    _cond = booleanTest() { _factor.setTest(_cond); return _factor; }
}

BooleanCondition booleanTest() :
{
    BooleanCondition _cond;
}
{
    (
        _cond = predicate() |
        _cond = parenthesizedBooleanExpression()
    ) { return _cond; }
}

BooleanCondition parenthesizedBooleanExpression() :
{
    BooleanCondition _cond;
}
{
    < LEFT_PAREN >
    _cond = booleanValueExpression()
    < RIGHT_PAREN >
    { return _cond; }
}

BooleanCondition predicate() :
{
    BooleanCondition _cond;
}
{
    (
        // Comparison Predicate이 Null Predicate에 선점당하는 것을 막기 위한 LOOKAHEAD 처리
        LOOKAHEAD(4)
        _cond = comparisonPredicate()
        | _cond = nullPredicate()
    )
    { return _cond; }
}

BooleanCondition comparisonPredicate() :
{
    ComparisonPredicate _comp = new ComparisonPredicate();
    ComparableValue left;
    ComparableValue right;
    String operator;
}
{
    left = compOperand() { _comp.setLeft(left); }
    operator = compOp() { _comp.setOperator(operator); }
    right = compOperand() { _comp.setRight(right); }
    { return _comp; }
}

ComparableValue compOperand() :
{
    ComparableValue _val;
    String _tableName;
    String _columnName;
    String tabcol = "";
}
{
    // table name과 column name에 선점 당하는 것을 막기 위한 LOOKAHEAD 처리
    (
        _val = comparableValue()
        | ([ LOOKAHEAD(2) _tableName = tableName() { tabcol = _tableName.concat("."); } < PERIOD > ] _columnName = columnName() { tabcol = tabcol.concat(_columnName); })
        {
            _val = new ComparableValue(DataType.TABLECOL, tabcol);
        }
    )
    { return _val; }
}

String compOp() :
{
    Token t;
}
{
    (
        t = < INEQ_S > |
        t = < INEQ_SE > |
        t = < INEQ_B > |
        t = < INEQ_BE > |
        t = < INEQ_E > |
        t = < INEQ_NE >
    )
    { return t.toString(); }
}

ComparableValue comparableValue() :
{
    Token t;
    ComparableValue _v;
}
{
    t = < INT_VALUE > { return new ComparableValue(DataType.INTEGER, t.toString()); } |
    t = < CHAR_STRING > { return new ComparableValue(DataType.CHARACTER, t.toString().replace("'", "")); } |
    t = < DATE_VALUE > { return new ComparableValue(DataType.DATE, t.toString()); }
}

BooleanCondition nullPredicate() :
{
    NullPredicate _nullpred = new NullPredicate();
    String _tableName = null;
    String _columnName;
    Boolean _null;
}
{
    // table name이 column name에 선점 당하는 것을 막기 위한 LOOKAHEAD 처리
    [ LOOKAHEAD(2) _tableName = tableName() < PERIOD > ]
    _columnName = columnName()
    _null = nullOperation()
    {
        _nullpred.setTableName(_tableName);
        _nullpred.setColName(_columnName);
        _nullpred.setNull(_null);

        return _nullpred;
    }
}

Boolean nullOperation() :
{}
{
    < IS > ( < NOT_NULL > { return false; } | < NULL > { return true;} )
}

void tableElementList(TableDefinition.Builder builder) :
{
}
{
    < LEFT_PAREN > tableElement(builder)
    ( < COMMA > tableElement(builder) )*
    < RIGHT_PAREN >
}

void tableElement(TableDefinition.Builder builder) :
{
    ColumnDefinition column;
}
{
  column = columnDefinition() { builder.addColumn(column); }
| tableConstraintDefinition(builder)
}

ColumnDefinition columnDefinition() :
{
    ColumnDefinition.Builder columnBuilder = new ColumnDefinition.Builder();
    String columnName;
    DataTypeDefinition dataType;
}
{
    columnName = columnName() { columnBuilder.setColumnName(columnName); }
    dataType = dataType() { columnBuilder.setDataType(dataType); }
    ( < NOT_NULL > { columnBuilder.setConstraint("not null"); } )?
    { return columnBuilder.create(); }
}

void tableConstraintDefinition(TableDefinition.Builder builder) :
{
    ForeignKeyDefinition foreignKeyDefinition;
    ArrayList<String> primaryKeyList;
}
{
    primaryKeyList = primaryKeyConstraint() { builder.setPrimaryKeys(primaryKeyList); } |
    foreignKeyDefinition = referentialConstraint() { builder.addForeignKey(foreignKeyDefinition); }
}

ArrayList<String> primaryKeyConstraint() :
{
    ArrayList<String> compositePk;
}
{
  < PRIMARY > < KEY >
  compositePk = columnNameList()
  { return compositePk; }
}

ForeignKeyDefinition referentialConstraint() :
{
    ForeignKeyDefinition.Builder fbuilder = new ForeignKeyDefinition.Builder();
    String _referencedTableName;
    ArrayList<String> _referencedColumn;
    ArrayList<String> _referencingColumn;
}
{
  < FOREIGN > < KEY >
  _referencingColumn = columnNameList() { fbuilder.setReferencingColumn(_referencingColumn); }
  < REFERENCES >
  _referencedTableName = tableName() { fbuilder.setReferencedTableName(_referencedTableName); }
  _referencedColumn = columnNameList() { fbuilder.setReferencedColumn(_referencedColumn);   return fbuilder.create(); }
}

void insertColumnsAndSource(InsertQuery.Builder builder) :
{
    ArrayList<String> _columnName = new ArrayList<String>();
    ArrayList<ComparableValue> _valueList;
}
{
    [ _columnName = columnNameList()]
    _valueList = valueList()
    {
        builder
            .setColumnName(_columnName)
            .setValueList(_valueList);
    }
}

ArrayList<ComparableValue> valueList() :
{
    ArrayList<ComparableValue> _valueList = new ArrayList<>();
    ComparableValue _value;
}
{
    < VALUES > < LEFT_PAREN >
    _value = value() { _valueList.add(_value); }
    (
        < COMMA >
        _value = value() { _valueList.add(_value); }
    )*
    < RIGHT_PAREN >
    { return _valueList; }
}

ArrayList<String> columnNameList() :
{
    ArrayList<String> _columnNameList = new ArrayList<>();
    String _columnName;
}
{
    < LEFT_PAREN >
    _columnName = columnName() { _columnNameList.add(_columnName); }
    (
        < COMMA >
        _columnName = columnName() { _columnNameList.add(_columnName); }
    )*
    < RIGHT_PAREN >
    { return _columnNameList; }
}

DataTypeDefinition dataType() :
{
    DataType _dataType;
    int _charLength = 0;
    Token temp;
}
{
    (
        < INT > { _dataType = DataType.INTEGER; } |
        < CHAR > < LEFT_PAREN > temp = < INT_VALUE > < RIGHT_PAREN > { _dataType = DataType.CHARACTER; _charLength = Integer.parseInt(temp.image); } |
        < DATE > { _dataType = DataType.DATE; }
    )
    { return new DataTypeDefinition(_dataType, _charLength); }
}

String tableName() :
{
    Token _tableName;
}
{
    _tableName = < LEGAL_IDENTIFIER >
    {
        return _tableName.toString().toUpperCase();
    }
}

String columnName() :
{
    Token _columnName;
}
{
    _columnName = < LEGAL_IDENTIFIER >
    { return _columnName.toString().toUpperCase(); }
}

ComparableValue value() :
{
    ComparableValue _value;
}
{
    (
        < NULL > { _value = new ComparableValue(DataType.CHARACTER, null); } |
        _value = comparableValue()
    )
    { return _value; }
}